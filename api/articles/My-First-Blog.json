{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"My-First-Blog","date":"2024-03-11T13:26:08.057Z","updated":"2024-03-11T10:42:21.539Z","comments":true,"path":"api/articles/My-First-Blog.json","keywords":null,"cover":[],"content":"<h1 id=\"CS100-Recitation-2\"><a href=\"#CS100-Recitation-2\" class=\"headerlink\" title=\"CS100 Recitation 2\"></a>CS100 Recitation 2</h1><p>GKxx</p>\n<hr>\n<h1 id=\"Contents\"><a href=\"#Contents\" class=\"headerlink\" title=\"Contents\"></a>Contents</h1><ul>\n<li>算术类型（续）</li>\n<li>运算符和表达式（续）</li>\n<li>控制流</li>\n<li>变量命名、声明、初始化</li>\n<li>名字查找</li>\n</ul>\n<hr>\n<h1 id=\"算术类型\"><a href=\"#算术类型\" class=\"headerlink\" title=\"算术类型\"></a>算术类型</h1><hr>\n<h2 id=\"字面值-literals\"><a href=\"#字面值-literals\" class=\"headerlink\" title=\"字面值 (literals)\"></a>字面值 (literals)</h2><p>像 <code>42</code> 这样把值写在脸上的就是字面值。</p>\n<ul>\n<li>整型字面值 (integer literals)：<code>42</code>, <code>100L</code>, <code>0ll</code>, <code>405ul</code><ul>\n<li>不写后缀，默认是 <code>int</code>，如果 <code>int</code> 不够大就是 <code>long</code>，还不够大就是 <code>long long</code>。还不够大的话：<ul>\n<li>如果编译器支持 <code>__int128</code> 并且它够大，那就是 <code>__int128</code></li>\n<li>否则报错 (ill-formed)。</li>\n</ul>\n</li>\n<li>不存在负字面值：<code>-42</code> 是将一元负号 <code>-</code> 作用在字面值 <code>42</code> 上形成的表达式。</li>\n<li>后缀有 <code>u</code> (<code>unsigned</code>), <code>l</code> (<code>long</code>), <code>ll</code> (<code>long long</code>)。大小写不敏感，但是不可以是 <code>lL</code> 或 <code>Ll</code>。</li>\n<li>后缀可以任意组合。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"字面值-literals-1\"><a href=\"#字面值-literals-1\" class=\"headerlink\" title=\"字面值 (literals)\"></a>字面值 (literals)</h2><p>像 <code>42</code> 这样把值写在脸上的就是字面值。</p>\n<ul>\n<li>整型字面值 (integer literal)：<code>42</code>, <code>100L</code>, <code>0ll</code>, <code>405ul</code><ul>\n<li>还可以有十六进制字面值：<code>0xBAADF00D</code></li>\n<li>以及八进制字面值：<code>052</code></li>\n<li>以及 C23 的二进制字面值：<code>0b101010</code><ul>\n<li>实际上编译器早就支持了，隔壁 C++14 就有二进制字面值了。</li>\n</ul>\n</li>\n<li>这里所有的字母的大小写都随意。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"字面值-literals-2\"><a href=\"#字面值-literals-2\" class=\"headerlink\" title=\"字面值 (literals)\"></a>字面值 (literals)</h2><p>浮点数字面值：<code>3.14</code>, <code>3.14f</code>, <code>3.14l</code>, <code>1e8</code>, <code>3e-8</code></p>\n<ul>\n<li>不写后缀，默认是 <code>double</code>。<code>f</code> 是 <code>float</code>，<code>l</code> 是 <code>long double</code>，大小写不敏感。</li>\n<li><code>1e8</code> 表示 $10^8$，但它是 <code>double</code> 而非整数。</li>\n</ul>\n<p>字符字面值：<code>&#39;a&#39;</code></p>\n<ul>\n<li>猜猜 <code>&#39;a&#39;</code> 是什么类型？</li>\n</ul>\n<hr>\n<h2 id=\"字面值-literals-3\"><a href=\"#字面值-literals-3\" class=\"headerlink\" title=\"字面值 (literals)\"></a>字面值 (literals)</h2><p>浮点数字面值：<code>3.14</code>, <code>3.14f</code>, <code>3.14l</code>, <code>1e8</code>, <code>3e-8</code></p>\n<ul>\n<li>不写后缀，默认是 <code>double</code>。<code>f</code> 是 <code>float</code>，<code>l</code> 是 <code>long double</code>，大小写不敏感。</li>\n<li><code>1e8</code> 表示 $10^8$，但它是 <code>double</code> 而非整数。</li>\n</ul>\n<p>字符字面值 (character literal)：<code>&#39;a&#39;</code></p>\n<ul>\n<li><code>&#39;a&#39;</code> 的类型居然是 <code>int</code>？？</li>\n<li>C++ 里它就是 <code>char</code> 了。</li>\n</ul>\n<hr>\n<h2 id=\"字符？一个小整数罢了\"><a href=\"#字符？一个小整数罢了\" class=\"headerlink\" title=\"字符？一个小整数罢了\"></a>字符？一个小整数罢了</h2><p><code>char c = &#39;a&#39;;</code></p>\n<p><code>c</code> 所存储的内容<strong>就是</strong>整数 <code>97</code>，即 <code>&#39;a&#39;</code> 的 ASCII 码，而非任何神秘的图像。</p>\n<p>假如字符 <code>c</code> 是一个数字字符，如何获得它所表示的数值？</p>\n<hr>\n<h2 id=\"字符？一个小整数罢了-1\"><a href=\"#字符？一个小整数罢了-1\" class=\"headerlink\" title=\"字符？一个小整数罢了\"></a>字符？一个小整数罢了</h2><p><code>char c = &#39;a&#39;;</code></p>\n<p><code>c</code> 所存储的内容<strong>就是</strong>整数 <code>97</code>，即 <code>&#39;a&#39;</code> 的 ASCII 码，而非任何神秘的图像。</p>\n<p>假如字符 <code>c</code> 是一个数字字符，<code>c - &#39;0&#39;</code> 就是它所表示的数值。</p>\n<p>练习：实现一个函数 <code>is_lower</code>，接受一个 <code>char</code>，判断它是不是小写英文字母。</p>\n<hr>\n<h2 id=\"字符？一个小整数罢了-2\"><a href=\"#字符？一个小整数罢了-2\" class=\"headerlink\" title=\"字符？一个小整数罢了\"></a>字符？一个小整数罢了</h2><p>练习：实现一个函数 <code>is_lower</code>，接受一个 <code>char</code>，判断它是不是小写英文字母。</p>\n<pre><code class=\"highlight c\"><span class=\"type\">bool</span> <span class=\"title function_\">is_lower</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;\n  <span class=\"keyword\">return</span> c &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;z&#x27;</span>;\n&#125;</code></pre>\n\n<p>练习：实现一个函数 <code>to_upper</code>，接受一个 <code>char</code>，如果它是小写英文字母就返回它的大写形式，否则返回它本身。</p>\n<hr>\n<h2 id=\"字符：一个小整数罢了\"><a href=\"#字符：一个小整数罢了\" class=\"headerlink\" title=\"字符：一个小整数罢了\"></a>字符：一个小整数罢了</h2><p>练习：实现一个函数 <code>to_upper</code>，接受一个 <code>char</code>，如果它是小写英文字母就返回它的大写形式，否则返回它本身。</p>\n<pre><code class=\"highlight c\"><span class=\"type\">char</span> <span class=\"title function_\">to_upper</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;\n  <span class=\"keyword\">return</span> is_lower(c) ? c - <span class=\"number\">32</span> : c;\n&#125;</code></pre>\n\n<h3 id=\"条件运算符：\"><a href=\"#条件运算符：\" class=\"headerlink\" title=\"条件运算符：\"></a>条件运算符：</h3><p><code>condition ? exprT : exprF</code></p>\n<p>先对 <code>condition</code> 求值，如果为 <code>true</code> 则执行 <code>exprT</code>，否则执行 <code>exprF</code></p>\n<p><strong>为数不多的能确定运算对象求值顺序的运算符之一</strong></p>\n<hr>\n<h2 id=\"字符：一个小整数罢了-1\"><a href=\"#字符：一个小整数罢了-1\" class=\"headerlink\" title=\"字符：一个小整数罢了\"></a>字符：一个小整数罢了</h2><p>更直白一些：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">char</span> <span class=\"title function_\">to_upper</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;\n  <span class=\"keyword\">return</span> is_lower(c) ? c - (<span class=\"string\">&#x27;a&#x27;</span> - <span class=\"string\">&#x27;A&#x27;</span>) : c;\n&#125;</code></pre>\n\n<p><strong>self-documenting code</strong>：你的代码自己能解释自己。</p>\n<ul>\n<li><code>c - 32</code> 虽然简洁，但出现了一个“幻数” (magic number)：<code>32</code>是什么意思？</li>\n<li><code>c - (&#39;a&#39; - &#39;A&#39;)</code> 一定会被编译器优化为 <code>c - 32</code>，完全不必担心。</li>\n</ul>\n<hr>\n<h2 id=\"字面值-literals-4\"><a href=\"#字面值-literals-4\" class=\"headerlink\" title=\"字面值 (literals)\"></a>字面值 (literals)</h2><p>字符串字面值：<code>&quot;hello&quot;</code></p>\n<ul>\n<li>它的类型是 <code>char [N+1]</code>，其中 <code>N</code> 是这个字符串的长度。<ul>\n<li><p>**但在 C++ 中它是 <code>const char [N+1]</code>**，而且事实上它确实不可修改！</p>\n<pre><code class=\"highlight c\"><span class=\"type\">char</span> *str = <span class=\"string\">&quot;hello&quot;</span>; <span class=\"comment\">// Correct C, Incorrect C++.</span>\nstr[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;b&#x27;</span>;        <span class=\"comment\">// Undefined behavior. (Forbidden in C++)</span></code></pre></li>\n<li><p>正确的办法：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">const</span> <span class=\"type\">char</span> *str = <span class=\"string\">&quot;hello&quot;</span>;\n<span class=\"type\">char</span> arr[] = <span class=\"string\">&quot;hello&quot;</span>;</code></pre></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"溢出\"><a href=\"#溢出\" class=\"headerlink\" title=\"溢出\"></a>溢出</h2><p>一个变量的值超出了这个变量所能表示的范围。</p>\n<ul>\n<li><p>这里的“变量”有可能是临时量！</p>\n</li>\n<li><p>判断下列运算是否溢出：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> ival = <span class=\"number\">10000000</span>;\n<span class=\"type\">long</span> <span class=\"type\">long</span> llval = ival * ival;\n<span class=\"type\">long</span> <span class=\"type\">long</span> llval2 = <span class=\"number\">1ll</span> * ival * ival;\n<span class=\"type\">long</span> <span class=\"type\">long</span> llval3 = <span class=\"number\">0ll</span> + ival * ival;</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"溢出-1\"><a href=\"#溢出-1\" class=\"headerlink\" title=\"溢出\"></a>溢出</h2><p>一个变量的值超出了这个变量所能表示的范围。</p>\n<ul>\n<li><p>这里的“变量”有可能是临时量！</p>\n</li>\n<li><p>判断下列运算是否溢出：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> ival = <span class=\"number\">10000000</span>;\n<span class=\"type\">long</span> <span class=\"type\">long</span> llval = ival * ival;         <span class=\"comment\">// 溢出</span>\n<span class=\"type\">long</span> <span class=\"type\">long</span> llval2 = <span class=\"number\">1ll</span> * ival * ival;  <span class=\"comment\">// ok</span>\n<span class=\"type\">long</span> <span class=\"type\">long</span> llval3 = <span class=\"number\">0ll</span> + ival * ival;  <span class=\"comment\">// 溢出</span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"溢出-2\"><a href=\"#溢出-2\" class=\"headerlink\" title=\"溢出\"></a>溢出</h2><ul>\n<li>无符号数永远不会溢出：无符号数的运算总是在 $\\bmod 2^N$ 意义下进行的，其中 $N$ 是这个无符号数的位数。<ul>\n<li><code>unsigned uval = -1;</code> 执行后，<code>uval</code> 的值是多少？</li>\n</ul>\n</li>\n<li>带符号整数溢出是 <strong>undefined behavior</strong>：你无法对结果作任何假定。<ul>\n<li><p>可能会得到在 2’s complement 意义下的一个值，也可能被视为 runtime-error 而崩溃，或者其它任何可能的结果。</p>\n</li>\n<li><p><strong>编译器可以假定你的程序没有 undefined behavior</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不开 O2 能过，开了 O2 却 RE？</p></blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"运算符和表达式\"><a href=\"#运算符和表达式\" class=\"headerlink\" title=\"运算符和表达式\"></a>运算符和表达式</h1><hr>\n<h2 id=\"递增、递减运算符\"><a href=\"#递增、递减运算符\" class=\"headerlink\" title=\"递增、递减运算符\"></a>递增、递减运算符</h2><p><code>++i</code>, <code>i++</code>, <code>--i</code>, <code>i--</code></p>\n<ul>\n<li><p>效果是给 <code>i</code> 的值加 1 或减 1。</p>\n</li>\n<li><p>试一试：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> ival = <span class=\"number\">42</span>;\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ival++);\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ++ival);\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d, %d\\n&quot;</span>, ++ival, ival++);</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"递增、递减运算符-1\"><a href=\"#递增、递减运算符-1\" class=\"headerlink\" title=\"递增、递减运算符\"></a>递增、递减运算符</h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> ival = <span class=\"number\">42</span>;\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ival++);              <span class=\"comment\">// 42, 此时 ival == 43</span>\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ++ival);              <span class=\"comment\">// 44, 此时 ival == 44</span>\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d, %d\\n&quot;</span>, ++ival, ival++);\n<span class=\"comment\">// warning: operation on ‘ival’ may be undefined [-Wsequence-point]</span></code></pre>\n\n<ul>\n<li>没人规定函数的各个参数一定从左向右求值：<a href=\"https://en.cppreference.com/w/c/language/eval_order\">order of evaluation</a></li>\n<li><code>f(A, B)</code> 中，<code>A</code> 和 <code>B</code> 谁先求值是 <a href=\"https://en.cppreference.com/w/c/language/behavior\"><strong>unspecified</strong></a>。</li>\n<li>如果 <code>A</code> 和 <code>B</code> 都修改了某一个变量，或者一个读、一个写，则是 <strong>undefined behavior</strong>。</li>\n</ul>\n<hr>\n<h2 id=\"递增、递减运算符-2\"><a href=\"#递增、递减运算符-2\" class=\"headerlink\" title=\"递增、递减运算符\"></a>递增、递减运算符</h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> ival = <span class=\"number\">42</span>;\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ival++);              <span class=\"comment\">// 42, 此时 ival == 43</span>\n<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ++ival);              <span class=\"comment\">// 44, 此时 ival == 44</span></code></pre>\n\n<ul>\n<li><code>++ival</code> 将 <code>ival</code> 的值加 1，并返回递增后的值。</li>\n<li><code>ival++</code> 将 <code>ival</code> 的值加 1，但返回其递增前的值。</li>\n<li>递减类似。</li>\n</ul>\n<hr>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code></p>\n<p>返回值类型是 <code>int</code>，<code>1</code> 表示 <code>true</code>，<code>0</code> 表示 <code>false</code>。</p>\n<ul>\n<li><code>a &lt; b &lt; c</code> 是在做什么？</li>\n</ul>\n<hr>\n<h2 id=\"关系运算符-1\"><a href=\"#关系运算符-1\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code></p>\n<p>返回值类型是 <code>int</code>，<code>1</code> 表示 <code>true</code>，<code>0</code> 表示 <code>false</code>。</p>\n<ul>\n<li><code>a &lt; b &lt; c</code> 是在做什么？<ul>\n<li><strong>左结合</strong>：<code>a &lt; b &lt; c</code> 被视为 <code>(a &lt; b) &lt; c</code></li>\n<li>实际上比较的是 <code>c</code> 和 <code>1</code> 或 <code>0</code> 的大小关系</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p><code>&amp;&amp;</code>, <code>||</code>, <code>!</code></p>\n<p><strong>短路求值</strong> (short-circuited)：先求左边，如果左边的结果能确定表达式的结果，就不再对右边求值。</p>\n<ul>\n<li><code>&amp;&amp;</code>：如果左边是 <code>false</code>，则右边不会求值</li>\n<li><code>||</code>：如果左边是 <code>true</code>，则右边不会求值</li>\n</ul>\n<p><strong>为数不多的能确定运算对象求值顺序的运算符之一</strong></p>\n<hr>\n<h2 id=\"优先级表（部分）\"><a href=\"#优先级表（部分）\" class=\"headerlink\" title=\"优先级表（部分）\"></a>优先级表（部分）</h2><ul>\n<li>后置递增，后置递减</li>\n<li>前置递增，前置递减，位求反，逻辑非，一元正负，解引用，取地址</li>\n<li>乘除模 $&gt;$ 加减</li>\n<li>左移右移</li>\n<li>小于，小于等于，大于，大于等于 $&gt;$ 相等，不相等</li>\n<li>位与 $&gt;$ 位异或 $&gt;$ 位或</li>\n<li>逻辑与 $&gt;$ 逻辑或</li>\n<li>条件 $&gt;$ 赋值 $&gt;$ 复合赋值</li>\n</ul>\n<hr>\n<h2 id=\"优先级-precedence\"><a href=\"#优先级-precedence\" class=\"headerlink\" title=\"优先级 (precedence)\"></a>优先级 (precedence)</h2><p>如果没记住：</p>\n<ul>\n<li>对于位运算符、逻辑运算符和其它运算符混合的情况，建议加括号<ul>\n<li><code>(a + b) &gt;&gt; 1</code> 和 <code>a + b &gt;&gt; 1</code> 是一样的，但前者看起来更让人安心</li>\n<li><code>if (a1 &lt; a2 || (a1 == a2 &amp;&amp; b1 &lt; b2))</code>：内层的括号其实不需要加，但加上更清楚。</li>\n</ul>\n</li>\n<li>其它情况，<strong>建议先翻运算符优先级表</strong>加强记忆，而不是滥用括号糊弄过去<ul>\n<li>滥用括号会让你的代码一团糟</li>\n<li><code>if (((a1) &lt; (a2)) || (((a1) == (a2)) &amp;&amp; ((b1) &lt; (b2))))</code><br>你能一眼看出这是 <code>if (A || (B &amp;&amp; C))</code> 还是 <code>if ((A || B) &amp;&amp; C)</code> 吗？</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"结合性-associativity\"><a href=\"#结合性-associativity\" class=\"headerlink\" title=\"结合性 (associativity)\"></a>结合性 (associativity)</h2><p>形如 <code>expr1 op1 expr2 op2 expr3 ...</code> 的表达式，如果 <code>op1</code> 和 <code>op2</code> 具有相同的优先级，这时 <code>op1</code> 和 <code>op2</code> 的<strong>结合性</strong>决定了这个表达式被如何解析。</p>\n<ul>\n<li><code>a - b + c</code> 是 <code>(a - b) + c</code> 而非 <code>a - (b + c)</code>，因为 <code>+</code> 和 <code>-</code> 是<strong>左结合</strong>的。</li>\n<li>优先级相同的运算符一定具有相同的结合性。</li>\n<li><strong>结合性无法决定求值顺序</strong>：<code>f() - g() + h()</code> 中的 <code>f()</code>，<code>g()</code> 和 <code>h()</code> 的调用顺序是 unspecified 的。</li>\n</ul>\n<hr>\n<h2 id=\"求值顺序-order-of-evaluation\"><a href=\"#求值顺序-order-of-evaluation\" class=\"headerlink\" title=\"求值顺序 (order of evaluation)\"></a>求值顺序 (order of evaluation)</h2><ul>\n<li><strong>结合性无法决定求值顺序</strong>：<code>f() - g() + h()</code> 中的 <code>f()</code>，<code>g()</code> 和 <code>h()</code> 的调用顺序是 unspecified 的。</li>\n<li><strong>优先级无法决定求值顺序</strong>：<code>f() + g() * h()</code> 中的 <code>f()</code>，<code>g()</code> 和 <code>h()</code> 的调用顺序是 unspecified 的。</li>\n</ul>\n<hr>\n<h2 id=\"求值顺序-order-of-evaluation-1\"><a href=\"#求值顺序-order-of-evaluation-1\" class=\"headerlink\" title=\"求值顺序 (order of evaluation)\"></a>求值顺序 (order of evaluation)</h2><p>仅有个别运算符规定了求值顺序，目前已知的有：</p>\n<ul>\n<li><code>&amp;&amp;</code> 和 <code>||</code>：<strong>短路求值</strong></li>\n<li><code>?:</code></li>\n</ul>\n<p>典型的错误：</p>\n<ul>\n<li><code>add_edge(read(), read(), read());</code><a href=\"https://www.luogu.com.cn/record/11435402\">本人亲身经历</a></li>\n<li><code>printf(&quot;%d, %d&quot;, ++i, i);</code>前年 CS100 的 quiz 题，当天中午 piazza 上就开团了</li>\n</ul>\n<hr>\n<h2 id=\"求值顺序-order-of-evaluation-2\"><a href=\"#求值顺序-order-of-evaluation-2\" class=\"headerlink\" title=\"求值顺序 (order of evaluation)\"></a>求值顺序 (order of evaluation)</h2><p>看看标准怎么讲述这些东西：<a href=\"https://en.cppreference.com/w/c/language/eval_order\">https://en.cppreference.com/w/c/language/eval_order</a></p>\n<ul>\n<li>value computation 和 side effects</li>\n<li>sequenced-before, unsequenced, indeterminably-sequenced</li>\n<li>rules</li>\n<li>undefined behavior</li>\n</ul>\n<hr>\n<h1 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h1><hr>\n<h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><p>练习：定义一个函数 <code>abs_int</code>，接受一个整数，返回其绝对值。输入一个整数，调用 <code>abs_int</code>，输出其绝对值。</p>\n<hr>\n<p>练习：定义一个函数 <code>abs_int</code>，接受一个整数，返回其绝对值。输入一个整数，调用 <code>abs_int</code>，输出其绝对值。</p>\n<div style=\"display: grid; grid-template-columns: 1fr 1fr;\">\n  <div>\n\n<pre><code class=\"highlight c\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;\n    <span class=\"keyword\">return</span> -x;\n  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) &#123;\n    <span class=\"keyword\">return</span> x;\n  &#125;\n&#125;</code></pre>\n  </div>\n  <div>\n\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, abs_int(x));\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n  </div>\n</div>\n\n<hr>\n<h2 id=\"if-else-1\"><a href=\"#if-else-1\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><p>如果只有一条语句，就可以不打花括号：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> -x;\n  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"if-else-2\"><a href=\"#if-else-2\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> -x;\n  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<p>编译一下，有 warning？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>warning: control reaches end of non-void function [-Wreturn-type]</p></blockquote>\n<p>什么意思？</p>\n<hr>\n<h2 id=\"if-else-3\"><a href=\"#if-else-3\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> -x;\n  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  <span class=\"keyword\">else</span>\n    <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<p>学会正确使用 <code>else</code>，不要反复 <code>if</code> 一个条件的正反面。</p>\n<hr>\n<h2 id=\"if-else-4\"><a href=\"#if-else-4\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> -x;\n  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n  <span class=\"keyword\">else</span>\n    <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<p>能不能更简洁？</p>\n<hr>\n<h2 id=\"if-else-5\"><a href=\"#if-else-5\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">return</span> -x;\n  <span class=\"keyword\">else</span>\n    <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<p>最简洁：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">abs_int</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">return</span> x &lt; <span class=\"number\">0</span> ? -x : x;\n&#125;</code></pre>\n\n<p><strong>简洁即美德</strong></p>\n<hr>\n<h2 id=\"if-else-6\"><a href=\"#if-else-6\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><p>写完代码之后再看一看，能不能简化？</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">max_verbose</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;\n  <span class=\"type\">int</span> result;\n  <span class=\"keyword\">if</span> (a &lt; b)\n  &#123;\n    result = b;\n  &#125;\n  <span class=\"keyword\">else</span>\n  &#123;\n    result = a;\n  &#125;\n  <span class=\"keyword\">return</span> result;\n&#125;\n\n<span class=\"type\">int</span> <span class=\"title function_\">max_simpified</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;\n  <span class=\"keyword\">return</span> a &lt; b ? b : a;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"if-else-7\"><a href=\"#if-else-7\" class=\"headerlink\" title=\"if-else\"></a><code>if</code>-<code>else</code></h2><p>Dangling <code>else</code>: 缩进会欺骗你</p>\n<pre><code class=\"highlight c\"><span class=\"keyword\">if</span> (condition1)\n  <span class=\"keyword\">if</span> (condition2)\n    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello\\n&quot;</span>);\n<span class=\"keyword\">else</span>\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;world\\n&quot;</span>);</code></pre>\n\n<p><strong>格式化器 (formatter) 会告诉你真相</strong></p>\n<hr>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a><code>while</code></h2><pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (condition)\n  loop_body</code></pre>\n\n<p>类似于 <code>if</code>-<code>else</code>，<code>loop_body</code> 可以是<strong>一条语句</strong>或**一个块 (block)**。</p>\n<p>练习：输入一个正整数 <code>n</code>，接下来输入 <code>n</code> 个整数，输出它们的和。</p>\n<hr>\n<h2 id=\"while-1\"><a href=\"#while-1\" class=\"headerlink\" title=\"while\"></a><code>while</code></h2><p>练习：输入一个正整数 <code>n</code>，接下来输入 <code>n</code> 个整数，输出它们的和。</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> n, a, x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);\n  a = <span class=\"number\">0</span>;\n  <span class=\"keyword\">while</span> (n--) &#123;\n    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n    a = a + x;\n  &#125;\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, a);\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"while-2\"><a href=\"#while-2\" class=\"headerlink\" title=\"while\"></a><code>while</code></h2><pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (n--) &#123;\n  <span class=\"comment\">// loop-body</span>\n&#125;</code></pre>\n\n<p>循环体执行了几次？执行完毕后 <code>n</code> 的值是多少？</p>\n<hr>\n<h2 id=\"while-3\"><a href=\"#while-3\" class=\"headerlink\" title=\"while\"></a><code>while</code></h2><pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (n--) &#123;\n  <span class=\"comment\">// loop-body</span>\n&#125;</code></pre>\n\n<p>循环体执行了 <code>n</code> 次。</p>\n<p>在 <code>n == 0</code> 时，<code>n--</code> 让 <code>n</code> 变成 <code>-1</code>，但返回 <code>0</code>，这使得循环结束。</p>\n<hr>\n<h2 id=\"while-4\"><a href=\"#while-4\" class=\"headerlink\" title=\"while\"></a><code>while</code></h2><p>能不能改进一下？</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> n, a, x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);\n  a = <span class=\"number\">0</span>;\n  <span class=\"keyword\">while</span> (n--) &#123;\n    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n    a = a + x;\n  &#125;\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, a);\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n\n<hr>\n<h3 id=\"变量命名要有意义\"><a href=\"#变量命名要有意义\" class=\"headerlink\" title=\"变量命名要有意义\"></a>变量命名要有意义</h3><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> n, sum, x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);\n  sum = <span class=\"number\">0</span>;\n  <span class=\"keyword\">while</span> (n--) &#123;\n    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n    sum = sum + x;\n  &#125;\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum);\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n\n<hr>\n<h3 id=\"变量在即将使用的时候再定义\"><a href=\"#变量在即将使用的时候再定义\" class=\"headerlink\" title=\"变量在即将使用的时候再定义\"></a>变量在即将使用的时候再定义</h3><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> n;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);\n  <span class=\"type\">int</span> sum;\n  sum = <span class=\"number\">0</span>;\n  <span class=\"keyword\">while</span> (n--) &#123;\n    <span class=\"type\">int</span> x;\n    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n    sum = sum + x;\n  &#125;\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum);\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n\n<hr>\n<h3 id=\"定义时立刻初始化，而非先定义再赋值\"><a href=\"#定义时立刻初始化，而非先定义再赋值\" class=\"headerlink\" title=\"定义时立刻初始化，而非先定义再赋值\"></a>定义时立刻初始化，而非先定义再赋值</h3><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> n;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);\n  <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;\n  <span class=\"keyword\">while</span> (n--) &#123;\n    <span class=\"type\">int</span> x;\n    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n    sum = sum + x;\n  &#125;\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum);\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"使用复合赋值运算符\"><a href=\"#使用复合赋值运算符\" class=\"headerlink\" title=\"使用复合赋值运算符\"></a>使用复合赋值运算符</h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> n;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);\n  <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;\n  <span class=\"keyword\">while</span> (n--) &#123;\n    <span class=\"type\">int</span> x;\n    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n    sum += x;\n  &#125;\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum);\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a><code>break</code></h2><p>如果遇到 <code>0</code>，则输出 <code>hello world</code> 并结束循环</p>\n<pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (n--) &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;\n    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello world\\n&quot;</span>);\n    <span class=\"keyword\">break</span>;\n  &#125;\n  sum += x;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a><code>continue</code></h2><p>跳过负数</p>\n<pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (n--) &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)\n    <span class=\"keyword\">continue</span>;\n  <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>) &#123;\n    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello world\\n&quot;</span>);\n    <span class=\"keyword\">break</span>;\n  &#125;\n  sum += x;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a><code>for</code></h2><p>用 <code>for</code> 改写这个循环：</p>\n<div style=\"display: grid; grid-template-columns: 1fr 1fr;\">\n  <div>\n\n<pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (n--) &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n  sum += x;\n&#125;</code></pre>\n  </div>\n  <div>\n\n<pre><code class=\"highlight c\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n  sum += x;\n&#125;</code></pre>\n  </div>\n</div>\n\n<hr>\n<h2 id=\"for-1\"><a href=\"#for-1\" class=\"headerlink\" title=\"for\"></a><code>for</code></h2><pre><code class=\"highlight c\"><span class=\"keyword\">for</span> (init_expression; condition; expression)\n  loop_body</code></pre>\n\n<p>等价于</p>\n<pre><code class=\"highlight c\">&#123;\n  init_expression;\n  <span class=\"keyword\">while</span> (condition) &#123;\n    loop_body\n    expression;\n  &#125;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"for-2\"><a href=\"#for-2\" class=\"headerlink\" title=\"for\"></a><code>for</code></h2><pre><code class=\"highlight c\"><span class=\"keyword\">for</span> (init_expression; condition; expression)\n  loop_body</code></pre>\n\n<ul>\n<li><p><code>init_expression</code> 可以是一个普通的表达式，也可以定义<strong>一种类型</strong>的<strong>若干个</strong>变量。</p>\n</li>\n<li><p><code>condition</code> 和 <code>expression</code> 也可以更复杂。</p>\n<pre><code class=\"highlight c\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = n - <span class=\"number\">1</span>; i &lt; j &amp;&amp; f(i, j); ++i, --j)</code></pre></li>\n<li><p><code>init_expression</code>、<code>condition</code>、<code>expression</code> 都可以不写，其中 <code>condition</code> 如果不写，相当于 <code>true</code>。</p>\n</li>\n<li><p><code>loop_body</code> 是一条语句或者一个块。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"逗号运算符\"><a href=\"#逗号运算符\" class=\"headerlink\" title=\"逗号运算符\"></a>逗号运算符</h3><pre><code class=\"highlight c\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = n - <span class=\"number\">1</span>; i &lt; j &amp;&amp; f(i, j); ++i, --j)</code></pre>\n\n<p><code>++i, --j</code> 中的 <code>,</code> 是<strong>逗号运算符</strong>：</p>\n<ul>\n<li>先对左边求值，再对右边求值，返回右边的值。</li>\n<li><code>i = (f(), g());</code> 对 <code>i</code> 赋的值是 <code>g()</code> 的值，并且 <code>f()</code> 在 <code>g()</code> 之前调用。</li>\n<li>逗号运算符具有<strong>最低</strong>的优先级。</li>\n<li><strong>为数不多的能确定运算对象求值顺序的运算符之一</strong></li>\n<li><code>int i = 0, j = n - 1</code> 和 <code>f(i, j)</code> 中的逗号<strong>不是</strong>逗号运算符！前者是声明语句而非表达式的一部分，后者是函数调用语法的一部分。</li>\n</ul>\n<hr>\n<h2 id=\"do-while\"><a href=\"#do-while\" class=\"headerlink\" title=\"do-while\"></a><code>do</code>-<code>while</code></h2><p>一种我从来不用的循环语句</p>\n<pre><code class=\"highlight c\"><span class=\"keyword\">do</span>\n  loop_body\n<span class=\"title function_\">while</span> <span class=\"params\">(condition)</span>;</code></pre>\n\n<ul>\n<li>先执行 <code>loop_body</code>，再根据 <code>condition</code> 判断是否进入下一次循环。</li>\n<li><code>condition</code> 不属于 <code>loop_body</code> 内部，在 <code>loop_body</code> 里定义的变量无法在 <code>condition</code> 里使用。</li>\n</ul>\n<hr>\n<h2 id=\"do-while-1\"><a href=\"#do-while-1\" class=\"headerlink\" title=\"do-while\"></a><code>do</code>-<code>while</code></h2><pre><code class=\"highlight c\"><span class=\"keyword\">do</span>\n  loop_body\n<span class=\"title function_\">while</span> <span class=\"params\">(condition)</span>;</code></pre>\n\n<p>等价于</p>\n<div style=\"display: grid; grid-template-columns: 1fr 1fr;\">\n  <div>\n\n<pre><code class=\"highlight c\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;\n  &#123; loop_body &#125;\n  <span class=\"keyword\">if</span> (!condition)\n    <span class=\"keyword\">break</span>;\n&#125;</code></pre>\n  </div>\n  <div>\n\n<pre><code class=\"highlight c\">&#123; loop_body &#125;\n<span class=\"keyword\">for</span> (; condition; ) &#123;\n  &#123; loop_body &#125;\n&#125;</code></pre>\n  </div>\n</div>\n\n<hr>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><ul>\n<li><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\"> n</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">code￼</span><span style=\"color: #F78C6C\">42</span><span style=\"color: #89DDFF\">--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">`</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\">` 换成 `</span><span style=\"color: #C792EA\">unsigned</span><span style=\"color: #BABED8\">` 也可以，反正 `i` 不会取负值。</span></span></code></pre></div></li>\n<li><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> n </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&gt;=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">code￼</span><span style=\"color: #F78C6C\">43</span><span style=\"color: #89DDFF\">--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">`</span><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\">` 换成 `</span><span style=\"color: #C792EA\">unsigned</span><span style=\"color: #BABED8\">` 也可以，反正 `i` 不会取负值。</span></span></code></pre></div></li>\n<li><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">unsigned</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> n </span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">&gt;=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\">i</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">code￼</span><span style=\"color: #F78C6C\">44</span><span style=\"color: #89DDFF\">--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;/</span><span style=\"color: #BABED8\">div</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">div</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div></li>\n</ul>\n<p>请改为：</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"comment\">/* ... */</span>\n  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)\n    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)\n      <span class=\"comment\">/* ... */</span>\n&#125;</code></pre>\n  </div>\n</div>\n\n<p>语言之所以这样发展，就是因为<strong>大量事实和经验表明这样更好</strong>。</p>\n<ul>\n<li>更清晰，也更不容易出错。</li>\n</ul>\n<hr>\n<h1 id=\"变量命名、声明、初始化\"><a href=\"#变量命名、声明、初始化\" class=\"headerlink\" title=\"变量命名、声明、初始化\"></a>变量命名、声明、初始化</h1><hr>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><ul>\n<li>下划线命名：<code>num_of_students</code>, <code>input_iterator</code></li>\n<li>驼峰命名：<code>numOfStudents</code>, <code>inputIterator</code></li>\n<li>（在一个作用域内）不要同时存在非常类似的名字，例如 <code>num</code>, <code>Num</code>, <code>num1</code><ul>\n<li><del>例如 <code>is_floating_point</code>、<code>floating_point</code>、<code>is_floating_point_v</code></del> <img src=\"/img/doge.jpg\" alt=\"w:40\"></li>\n</ul>\n</li>\n<li>在一份代码中采用一种统一的命名方式，不要同时存在 <code>num_of_students</code> 和 <code>numOfStudents</code></li>\n<li>宏通常全部大写：<code>#define INT_MAX 2147483647</code></li>\n<li>我的习惯：变量、函数名均以小写开头，类名以大写开头</li>\n</ul>\n<hr>\n<h2 id=\"变量的声明-declaration-和初始化-initialization\"><a href=\"#变量的声明-declaration-和初始化-initialization\" class=\"headerlink\" title=\"变量的声明 (declaration) 和初始化 (initialization)\"></a>变量的声明 (declaration) 和初始化 (initialization)</h2><p>目前我们见到的所有情况，<strong>声明</strong>和<strong>定义</strong> (definition) 是一回事。</p>\n<p>在声明变量的同时可以进行初始化，这称为<strong>显式 (explicit) 初始化</strong>。</p>\n<ul>\n<li><div class=\"language-c\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">c</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">int</span><span style=\"color: #BABED8\"> i </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">42</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&lt;!--</span><span style=\"color: #BABED8\">code￼</span><span style=\"color: #F78C6C\">46</span><span style=\"color: #89DDFF\">--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">是先定义（不初始化）再</span><span style=\"color: #89DDFF\">**</span><span style=\"color: #BABED8\">赋值</span><span style=\"color: #89DDFF\">**</span><span style=\"color: #BABED8\">。这两者在 C</span><span style=\"color: #89DDFF\">++</span><span style=\"color: #BABED8\"> 中将有非常明显 </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> 重要的区别。</span></span></code></pre></div></li>\n</ul>\n<hr>\n<h2 id=\"变量的声明-declaration-和初始化-initialization-1\"><a href=\"#变量的声明-declaration-和初始化-initialization-1\" class=\"headerlink\" title=\"变量的声明 (declaration) 和初始化 (initialization)\"></a>变量的声明 (declaration) 和初始化 (initialization)</h2><p>Best practice:</p>\n<ul>\n<li>在即将使用这个变量的时候再定义它，而不是将变量集中定义在块&#x2F;函数的开头<ul>\n<li>借用 Scott Meyers 的一句话：”It reeks of a bygone millennium.”</li>\n<li>在 <code>for</code> 语句的 <code>init_expression</code> 里定义循环变量，而不是定义在外部。</li>\n</ul>\n</li>\n<li>如果可以，在定义时就初始化这个变量，而非先默认初始化再赋值。<ul>\n<li><p>某些场合是例外，比如</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> n;\n<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</code></pre></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"如果没有显式地初始化…\"><a href=\"#如果没有显式地初始化…\" class=\"headerlink\" title=\"如果没有显式地初始化…\"></a>如果没有显式地初始化…</h2><ul>\n<li><strong>空初始化</strong> (empty-initialization)：各种零，例如 <code>int</code> 的 <code>0</code>、<code>double</code> 的 <code>0.0</code>、<code>char</code> 的 <code>&#39;\\0&#39;</code>（ASCII 值为 0）、<code>bool</code> 的 <code>false</code>、指针的 <code>NULL</code> &#x2F; <code>nullptr</code> (since C23)</li>\n<li>对于全局 (global) 或者局部静态 (local static) 变量，不显式初始化的情况下执行<strong>空初始化</strong>。</li>\n<li>对于局部非静态 (local non-static) 变量，不显式初始化的情况下将持有<strong>未定义的值</strong>：你不能对它的值作任何假定，<strong>使用未定义的值的行为是未定义的行为</strong>。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>什么是静态？可以暂时忽略，以后学到了再说。</p></blockquote>\n<hr>\n<h2 id=\"避免使用未初始化的值\"><a href=\"#避免使用未初始化的值\" class=\"headerlink\" title=\"避免使用未初始化的值\"></a>避免使用未初始化的值</h2><p>未初始化的变量会拥有任何可能的值？</p>\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">random</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"避免使用未初始化的值-1\"><a href=\"#避免使用未初始化的值-1\" class=\"headerlink\" title=\"避免使用未初始化的值\"></a>避免使用未初始化的值</h2><pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">random</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> x;\n  <span class=\"keyword\">return</span> x;\n&#125;</code></pre>\n\n<p>这段代码可以直接被编译为 (x86-64 clang 15.0.0 <code>-O2</code>)</p>\n<pre><code class=\"highlight assembly\">random:\n        ret</code></pre>\n\n<p>但有些编译器把它编译为 (RISC-V rv64gc gcc 12.2.0 <code>-O2</code>)</p>\n<pre><code class=\"highlight assembly\">random:\n        li a0, 0\n        ret</code></pre>\n\n<hr>\n<h2 id=\"避免使用未初始化的值-2\"><a href=\"#避免使用未初始化的值-2\" class=\"headerlink\" title=\"避免使用未初始化的值\"></a>避免使用未初始化的值</h2><p>编译器可以假定你的代码没有未定义的行为，因此对于未定义的行为可以任意处置，并不仅仅是使用一个随机的值这么简单。</p>\n<p><a href=\"https://en.cppreference.com/w/c/language/behavior\">一些例子</a></p>\n<hr>\n<h1 id=\"名字查找-name-lookup\"><a href=\"#名字查找-name-lookup\" class=\"headerlink\" title=\"名字查找 (name lookup)\"></a>名字查找 (name lookup)</h1><hr>\n<h2 id=\"作用域-scope\"><a href=\"#作用域-scope\" class=\"headerlink\" title=\"作用域 (scope)\"></a>作用域 (scope)</h2><div style=\"display: grid; grid-template-columns: 1fr 1fr;\">\n  <div>\n\n<pre><code class=\"highlight c\"><span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;\n  <span class=\"keyword\">return</span> x + y;\n&#125;\n<span class=\"type\">int</span> <span class=\"title function_\">square</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;\n  <span class=\"keyword\">return</span> x * x;\n&#125;\n<span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;\n  <span class=\"type\">int</span> x; <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);\n  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, square(x));\n  <span class=\"keyword\">if</span> (x == <span class=\"number\">42</span>) &#123;\n    <span class=\"type\">int</span> x = <span class=\"number\">35</span>;\n    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, square(square(x)));\n  &#125;\n  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">1</span>; x &lt;= <span class=\"number\">10</span>; ++x)\n    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, square(x + <span class=\"number\">1</span>));\n  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\n&#125;</code></pre>\n  </div>\n  <div>\n\n<ul>\n<li>作用域呈现一个<strong>树结构</strong>：</li>\n<li><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">global---add</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">       |-square</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">       |-main---if</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">              |-for</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"><pre><code class=\"highlight plaintext\">  &lt;/div&gt;\n&lt;/div&gt;\n\n---\n\n## 名字查找 (name lookup)\n\n&lt;div style=&quot;display: grid; grid-template-columns: 1fr 1fr;&quot;&gt;\n  &lt;div&gt;\n\n![](img/scopes.png)\n  &lt;/div&gt;\n  &lt;div&gt;\n\n- 作用域呈现一个**树结构**：\n- ```\n  global---add\n         |-square\n         |-main---if\n                |-for</code></pre></span></span></code></pre></div></li>\n<li>当名字 <code>x</code> 被引用时，对 <code>x</code> 的<strong>名字查找</strong>过程如下：<ul>\n<li>首先将程序在这个位置一分为二，只能看见上方的名字</li>\n<li>从当前位置所在的作用域开始逐层往外找，找到的第一个 <code>x</code> 就是。</div>\n</div></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"作用域和名字查找\"><a href=\"#作用域和名字查找\" class=\"headerlink\" title=\"作用域和名字查找\"></a>作用域和名字查找</h2><div style=\"display: grid; grid-template-columns: 1fr 1fr;\">\n  <div>\n\n<p><img src=\"/img/scopes.png\"><br>  </div><br>  <div></p>\n<ul>\n<li>作用域呈现一个<strong>树结构</strong>：</li>\n<li><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">global---add</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">       |-square</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">       |-main---if</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">              |-for</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"><pre><code class=\"highlight plaintext\">- 内层作用域里定义的名字会掩盖外层相同的名字\n- 如果在一个作用域里定义了两个相同的名字，则是语法错误。\n  &lt;/div&gt;\n&lt;/div&gt;\n\n---\n\n## 作用域和名字查找\n\n- 坚持在“即将使用的时候”定义一个变量，将它的作用域限定在最小的范围中。\n- 无需刻意避开其它作用域中的同名变量。\n  \n  ```c\n  for (int i = 0; i &lt; n; ++i)\n    do_something(i);\n  for (int i = 0; i &lt; n; ++i)\n    do_another_thing(i);\n  if (condition()) &#123;\n    for (int i = 0; i &lt; n; ++i)\n      do_something_else(i);\n  &#125;</code></pre></span></span></code></pre></div></li>\n</ul>\n","text":"CS100 Recitation 2GKxx Contents 算术类型（续） 运算符和表达式（续） 控制流 变量命名、声明、初始化 名字查找 算术类型 字面值...","permalink":"/post/My-First-Blog","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CS100-Recitation-2\"><span class=\"toc-text\">CS100 Recitation 2</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Contents\"><span class=\"toc-text\">Contents</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">算术类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E5%80%BC-literals\"><span class=\"toc-text\">字面值 (literals)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E5%80%BC-literals-1\"><span class=\"toc-text\">字面值 (literals)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E5%80%BC-literals-2\"><span class=\"toc-text\">字面值 (literals)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E5%80%BC-literals-3\"><span class=\"toc-text\">字面值 (literals)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%EF%BC%9F%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%95%B4%E6%95%B0%E7%BD%A2%E4%BA%86\"><span class=\"toc-text\">字符？一个小整数罢了</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%EF%BC%9F%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%95%B4%E6%95%B0%E7%BD%A2%E4%BA%86-1\"><span class=\"toc-text\">字符？一个小整数罢了</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%EF%BC%9F%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%95%B4%E6%95%B0%E7%BD%A2%E4%BA%86-2\"><span class=\"toc-text\">字符？一个小整数罢了</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%95%B4%E6%95%B0%E7%BD%A2%E4%BA%86\"><span class=\"toc-text\">字符：一个小整数罢了</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A\"><span class=\"toc-text\">条件运算符：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%95%B4%E6%95%B0%E7%BD%A2%E4%BA%86-1\"><span class=\"toc-text\">字符：一个小整数罢了</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E9%9D%A2%E5%80%BC-literals-4\"><span class=\"toc-text\">字面值 (literals)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA\"><span class=\"toc-text\">溢出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA-1\"><span class=\"toc-text\">溢出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA-2\"><span class=\"toc-text\">溢出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">运算符和表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%A2%9E%E3%80%81%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">递增、递减运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%A2%9E%E3%80%81%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6-1\"><span class=\"toc-text\">递增、递减运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%A2%9E%E3%80%81%E9%80%92%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6-2\"><span class=\"toc-text\">递增、递减运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6-1\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E8%A1%A8%EF%BC%88%E9%83%A8%E5%88%86%EF%BC%89\"><span class=\"toc-text\">优先级表（部分）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%85%88%E7%BA%A7-precedence\"><span class=\"toc-text\">优先级 (precedence)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%90%88%E6%80%A7-associativity\"><span class=\"toc-text\">结合性 (associativity)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F-order-of-evaluation\"><span class=\"toc-text\">求值顺序 (order of evaluation)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F-order-of-evaluation-1\"><span class=\"toc-text\">求值顺序 (order of evaluation)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F-order-of-evaluation-2\"><span class=\"toc-text\">求值顺序 (order of evaluation)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E6%B5%81\"><span class=\"toc-text\">控制流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-1\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-2\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-3\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-4\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-5\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-6\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#if-else-7\"><span class=\"toc-text\">if-else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#while\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#while-1\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#while-2\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#while-3\"><span class=\"toc-text\">while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#while-4\"><span class=\"toc-text\">while</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A6%81%E6%9C%89%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">变量命名要有意义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%9C%A8%E5%8D%B3%E5%B0%86%E4%BD%BF%E7%94%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%86%8D%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">变量在即将使用的时候再定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%97%B6%E7%AB%8B%E5%88%BB%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E8%80%8C%E9%9D%9E%E5%85%88%E5%AE%9A%E4%B9%89%E5%86%8D%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">定义时立刻初始化，而非先定义再赋值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%A4%8D%E5%90%88%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">使用复合赋值运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#break\"><span class=\"toc-text\">break</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#continue\"><span class=\"toc-text\">continue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for\"><span class=\"toc-text\">for</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for-1\"><span class=\"toc-text\">for</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#for-2\"><span class=\"toc-text\">for</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逗号运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#do-while\"><span class=\"toc-text\">do-while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#do-while-1\"><span class=\"toc-text\">do-while</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E3%80%81%E5%A3%B0%E6%98%8E%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">变量命名、声明、初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">命名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E-declaration-%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96-initialization\"><span class=\"toc-text\">变量的声明 (declaration) 和初始化 (initialization)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E-declaration-%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96-initialization-1\"><span class=\"toc-text\">变量的声明 (declaration) 和初始化 (initialization)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%98%BE%E5%BC%8F%E5%9C%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%A6\"><span class=\"toc-text\">如果没有显式地初始化…</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">避免使用未初始化的值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%80%BC-1\"><span class=\"toc-text\">避免使用未初始化的值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%80%BC-2\"><span class=\"toc-text\">避免使用未初始化的值</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE-name-lookup\"><span class=\"toc-text\">名字查找 (name lookup)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F-scope\"><span class=\"toc-text\">作用域 (scope)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%90%8D%E5%AD%97%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">作用域和名字查找</span></a></li></ol></li></ol>","author":{"name":"HangxingZhang","slug":"blog-author","avatar":"","link":"/","description":"Personal Life, C++, Data Structure and Algorithm, English Learning...","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2024-03-04T12:58:00.482Z","updated":"2024-03-04T12:58:00.482Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":440,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"HangxingZhang","slug":"blog-author","avatar":"","link":"/","description":"Personal Life, C++, Data Structure and Algorithm, English Learning...","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}